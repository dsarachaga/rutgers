group_by(broad_field,year) %>%
summarize(total_n_phds = sum(n_phds)) %>%
mutate(field_rank = min_rank(desc(total_n_phds))) %>%
arrange(broad_field,year, field_rank)
)
na.omit(phd_field %>%
group_by(major_field,field) %>%
summarize(total_n_phds = sum(n_phds)) %>%
mutate(field_rank = min_rank(desc(total_n_phds))) %>%
arrange(major_field,field, field_rank))
na.omit(phd_field %>%
group_by(broad_field,year) %>%
summarize(total_n_phds = sum(n_phds)) %>%
mutate(field_rank = min_rank(desc(total_n_phds))) %>%
arrange(broad_field,year, field_rank))
# For each player, find every year with more games than the previous year
phd_field %>%
group_by(major_field,field) %>%
summarize(total_n_phds = sum(n_phds)) %>%
filter( total_n_phds > lag(total_n_phds))
# For each player, find every year with more games than the previous year
phd_field %>%
group_by(field) %>%
summarize(total_n_phds = sum(n_phds)) %>%
filter( total_n_phds > lag(total_n_phds))
# For each player, find every year with more games than the previous year
phd_field %>%
group_by(field,year) %>%
summarize(total_n_phds = sum(n_phds)) %>%
filter( total_n_phds > lag(total_n_phds))
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(tidyverse)
players %>% filter( G > lag(G))
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(tidyverse)
```
<style>
pre {
overflow-x: auto;
}
pre code {
word-wrap: normal;
white-space: pre;
}
</style>
---
* Window functions are a concept borrowed from SQL
* Not to be confused with sliding windows used in smoothing, for example
---
## A classification of functions on vectors
* aggregation functions
+ e.g., `sum()`,  `mean()`, `n()`, `max()`
+ take n inputs and return a single value
* functions that work element-wise
+ e.g., `+`, `exp()`, `round()`
+ takes n inputs and returns n outputs
* window functions
+ Unlike aggregation functions, window functions return n values
+ Unlike element-wise functions, the output depends on all of the input values
---
```{r}
# Example from the vignette
library(Lahman)
batting <- Batting %>% as_tibble %>%
select(playerID, yearID, teamID, G, AB:H)
batting <- batting %>% arrange(playerID, yearID, teamID)
batting[1:3, ]
players <- batting %>% group_by(playerID)
```
---
```{r}
# Within each player, rank each year by the number of games played
players %>% mutate(G_rank = min_rank(G))
```
---
```{r}
# Within each player, rank each year by the number of games played from high to low
players %>% mutate(G_rank = min_rank(desc(G))) %>%
arrange(playerID, G_rank)
```
---
```{r}
# For each player, find the two years with most hits
players %>% filter(min_rank(desc(H)) <= 2 & H > 0)
# For each player, find every year with more games than the previous year
phd_field %>%
group_by(year, field) %>%
summarize(total_n_phds = sum(n_phds)) %>%
filter( total_n_phds > lag(total_n_phds))
# For each player, find every year with more games than the previous year
phd_field %>%
group_by(field,year) %>%
summarize(total_n_phds = sum(n_phds)) %>%
filter( total_n_phds > lag(total_n_phds))
# For each player, find every year with more games than the previous year
View(phd_field %>%
group_by(field,year) %>%
summarize(total_n_phds = sum(n_phds)) %>%
filter( total_n_phds > lag(total_n_phds)))
# For each player, find every year with more games than the previous year
players %>% filter( G > lag(G))
# For each player, find every year with more games than the previous year
phd_field %>%
group_by(field,year) %>%
summarize(total_n_phds = sum(n_phds)) %>%
arrange(total_n_phds)
# For each player, find every year with more games than the previous year
phd_field %>%
group_by(field,year) %>%
summarize(total_n_phds = sum(n_phds)) %>%
arrange(total_n_phds) %>%
filter( total_n_phds > lag(total_n_phds))
phd_field %>%
group_by(field,year) %>%
summarize(total_n_phds = sum(n_phds))
# For each player, find every year with more games than the previous year
phd_field %>%
group_by(field,year) %>%
summarize(total_n_phds = sum(n_phds)) %>%
arrange(field, year, total_n_phds) %>%
filter( total_n_phds > lag(total_n_phds))
# For each player, find every year with more games than the previous year
View(phd_field %>%
group_by(field,year) %>%
summarize(total_n_phds = sum(n_phds)) %>%
arrange(field, year, total_n_phds) %>%
filter (total_n_phds > lag(total_n_phds)))
# For each player, find every year with more games than the previous year
View(phd_field %>%
group_by(field,year) %>%
summarize(total_n_phds = sum(n_phds)) %>%
arrange(field, year, total_n_phds) %>%
filter (total_n_phds < lag(total_n_phds)))
# For each player, find every year with more games than the previous year
View(phd_field %>%
group_by(field,year) %>%
summarize(total_n_phds = sum(n_phds)) %>%
arrange(field, year, total_n_phds) %>%
filter (total_n_phds > lag(total_n_phds, n = 1)))
# For each player, find every year with more games than the previous year
View(phd_field %>%
group_by(field,year) %>%
summarize(total_n_phds = sum(n_phds)) %>%
arrange(field, year, total_n_phds) %>%
filter (total_n_phds > lag(total_n_phds, n = 2)))
phd_field %>%
group_by(broad_field) %>%
summarize(total_n_phds = sum(n_phds))
phd_field %>%
group_by(broad_field) %>%
summarize(total_n_phds = sum(n_phds)) %>% na.omit()
phd_field %>%
group_by(broad_field) %>%
summarize(total_n_phds = sum(n_phds)) %>% na.omit()
na.omit(phd_field %>%
group_by(broad_field) %>%
summarize(total_n_phds = sum(n_phds)))
phd_field %>%
group_by(broad_field) %>%
summarize(total_n_phds = sum(n_phds))%>%
arrange(total_n_phds)
phd_field
phd_field %>%
group_by(broad_field) %>%
summarize(total_n_phds = sum(n_phds))%>%
phd_field %>%
group_by(broad_field) %>%
summarize(total_n_phds = sum(n_phds))
phd_field %>%
group_by(broad_field) %>%
summarize(total_n_phds = sum(n_phds))
phd_field %>%
group_by(broad_field) %>%
summarize(total_n_phds = sum(na.omit(n_phds)))
phd_field %>%
group_by(broad_field) %>%
summarize(total_n_phds = sum(na.omit(n_phds))) %>%
arrange(total_n_phds)
phd_field %>%
group_by(broad_field, quartile = ntile(G, 4)) %>%
summarize(total_n_phds = sum(na.omit(n_phds)))
phd_field %>%
group_by(broad_field, quartile = ntile(total_n_phds, 4)) %>%
summarize(total_n_phds = sum(na.omit(n_phds)))
phd_field %>%
group_by(broad_field) %>%
summarize(total_n_phds = sum(na.omit(n_phds))) %>%
group_by(quartile = ntile(total_n_phds, 4))
phd_field %>%
group_by(broad_field) %>%
summarize(total_n_phds = sum(na.omit(n_phds))) %>%
group_by(quartile = ntile(total_n_phds, 4))
phd_field %>%
group_by(quartile = ntile(broad_field, 4)) %>%
summarize(total_n_phds = sum(na.omit(n_phds)))
phd_field %>%
group_by(broad_field, quartile = ntile(broad_field, 4)) %>%
summarize(total_n_phds = sum(na.omit(n_phds)))
Batting %>%
filter(yearID >= 1961 & AB > 0) %>%
group_by(quartile = ntile(G, 4)) %>%
summarise(batting_average = mean(H/AB))
# Selects best two years
players %>% filter(min_rank(desc(G)) <= 2)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(tidyverse)
# Example from the vignette
library(Lahman)
batting <- Batting %>% as_tibble %>%
select(playerID, yearID, teamID, G, AB:H)
batting <- batting %>% arrange(playerID, yearID, teamID)
batting[1:3, ]
players <- batting %>% group_by(playerID)
# Within each player, rank each year by the number of games played
players %>% mutate(G_rank = min_rank(G))
# Within each player, rank each year by the number of games played from high to low
players %>% mutate(G_rank = min_rank(desc(G))) %>%
arrange(playerID, G_rank)
# For each player, find the two years with most hits
players %>% filter(min_rank(desc(H)) <= 2 & H > 0)
# For each player, find every year with more games than the previous year
players %>% filter( G > lag(G))
# For each player, compute avg change in games played per year
players %>% mutate(G_change = (G - lag(G)) / (yearID - lag(yearID)))
# For each player, find all where they played more games than average
# (doesn't actually use a window function)
players %>% filter(G > mean(G))
# For each, player compute a z score based on number of games played
# (doesn't actually use a window function)
mutate(players, G_z = (G - mean(G)) / sd(G))
letters[1:10]
lead(letters[1:10])
lead(letters[1:10], n = 2)
lag(letters[1:10])
# Compute the relative change in games played
players %>% mutate(G_delta = G - lag(G))
# Find when a player changed teams
players %>% filter(teamID != lag(teamID))
x <- c(1, 1, 2, 2, 2)
rank(x, ties.method = "average")
rank(x, ties.method = "first")  # first occurrence wins
x
rank(x, ties.method = "last") # last occurrence wins
rank(x, ties.method = "max")
rank(x, ties.method = "min") # as in sports
row_number(x)
min_rank(x)
dense_rank(x)
x
percent_rank(x)
cume_dist(x)
# Selects best 10% of years
players %>% filter(cume_dist(desc(G)) <= 0.1)
phd_field %>%
group_by(broad_field, quartile = ntile(broad_field, 4)) %>%
summarize(total_n_phds = sum(na.omit(n_phds)))
phd_field %>%
group_by(broad_field, quartile = ntile(broad_field, 4)) %>%
summarize(total_n_phds = sum(na.omit(n_phds)))
phd_field %>%
group_by(broad_field, quartile = ntile(broad_field, 4)) %>%
summarize(total_n_phds = sum(na.omit(n_phds)))
phd_field %>%
group_by(broad_field, quartile = ntile(broad_field, 4)) %>%
summarize(total_n_phds = sum(na.omit(n_phds))) %>%
arrange(broad_field, quartile, total_n_phds)
phd_field %>%
group_by(broad_field, quartile = ntile(broad_field, 4)) %>%
summarize(total_n_phds = sum(na.omit(n_phds))) %>%
arrange(broad_field)
phd_field %>%
group_by(broad_field)%>%
group_by(quartile = ntile(broad_field, 4)) %>%
summarize(total_n_phds = sum(na.omit(n_phds))) %>%
arrange(broad_field, quartile, total_n_phds)
phd_field %>%
group_by(broad_field)%>%
group_by(quartile = ntile(broad_field, 4)) %>%
summarize(total_n_phds = sum(na.omit(n_phds))) %>%
Batting %>%
filter(yearID >= 1961 & AB > 0) %>%
group_by(quartile = ntile(G, 4)) %>%
summarise(batting_average = mean(H/AB))
phd_field %>%
group_by(broad_field)%>%
group_by(quartile = ntile(broad_field, 4)) %>%
summarize(total_n_phds = sum(na.omit(n_phds)))
phd_field %>%
group_by(broad_field)%>%
summarize(total_n_phds = sum(na.omit(n_phds)))
phd_field %>%
group_by(broad_field)%>%
summarize(total_n_phds = sum(na.omit(n_phds))) %>%
group_by(quartile = ntile(broad_field, 4))
phd_field %>%
group_by(broad_field)%>%
summarize(total_n_phds = sum(na.omit(n_phds))) %>%
group_by(quartile = ntile(broad_field, 4))
phd_field %>%
group_by(broad_field)%>%
summarize(total_n_phds = sum(na.omit(n_phds)))
phd_field %>%
group_by(broad_field)%>%
summarize(total_n_phds = sum(na.omit(n_phds)))%>%
group_by(quartile = ntile(broad_field, 4))
phd_field %>%
group_by(broad_field)%>%
group_by(quartile = ntile(broad_field, 4)) %>%
summarize(total_n_phds = sum(na.omit(n_phds)))
phd_field %>%
group_by(quartile = ntile(broad_field, 4)) %>%
summarize(total_n_phds = sum(na.omit(n_phds)))
Batting %>%
filter(yearID >= 1961 & AB > 0) %>%
group_by(quartile = ntile(G, 4)) %>%
summarise(batting_average = mean(H/AB))
phd_field %>%
group_by(quartile = ntile(broad_field, 4)) %>%
summarize(total_n_phds = sum(na.omit(n_phds)))
phd_field %>%
group_by(quartile = ntile(broad_field, 4)) %>%
summarize(total_n_phds = mean(sum(na.omit(n_phds)))/7)
phd_field %>% split(.$broad_field) %>%
summarize(total_n_phds = sum(na.omit(n_phds))) %>%
group_by(quartile = ntile(total_n_phds, 4))
phd_field %>% split(.$broad_field) %>%
group_by(quartile = ntile(total_n_phds, 4)) %>%
summarize(total_n_phds = sum(na.omit(n_phds)))
phd_field %>% split(.$broad_field) %>%
group_by(quartile = ntile(n_phds, 4)) %>%
summarize(total_n_phds = sum(na.omit(n_phds)))
phd_field %>% split(.$broad_field) %>%
group_by(quartile = ntile(n_phds, 4)) %>%
summarize(total_n_phds = sum(na.omit(n_phds)))
phd_field %>%
group_by(quartile = ntile(n_phds, 4)) %>%
summarize(total_n_phds = sum(na.omit(n_phds)))
phd_field %>% split(.$broad_field) %>%
group_by(quartile = ntile(n_phds, 4)) %>%
summarize(total_n_phds = sum(na.omit(n_phds)))
phd_field %>% split(.$broad_field) %>%
group_by(quartile = ntile(n_phds, 4)) %>%
summarize(total_n_phds = sum(na.omit(n_phds)))
phd_field %>% split(.$broad_field) %>%
group_by(broad_field, quartile = ntile(n_phds, 4)) %>%
summarize(total_n_phds = sum(na.omit(n_phds)))
phd_field %>%
group_by(broad_field, quartile = ntile(n_phds, 4)) %>%
summarize(total_n_phds = sum(na.omit(n_phds)))
na.omit(phd_field %>%
group_by(broad_field, quartile = ntile(n_phds, 4)) %>%
summarize(total_n_phds = sum(na.omit(n_phds))))
na.omit(phd_field %>%
group_by(broad_field) %>%
summarize(total_n_phds = sum(na.omit(n_phds))))
na.omit(phd_field %>%
group_by(broad_field, quartile = ntile(n_phds, 4)) %>%
summarize(total_n_phds = sum(na.omit(n_phds))))
na.omit(phd_field %>%
group_by(broad_field) %>%
summarize(total_n_phds = sum(na.omit(n_phds))))
sub = na.omit(phd_field[which(phd_field$broad_field==str),])
signa_to_noise_ratio("Life sciences")
signa_to_noise_ratio <-function(string)
{
if (string %in% phd_field$broad_field)
{
sub = na.omit(phd_field[which(phd_field$broad_field==string),])
sig_noise_ratio = mean(sub$n_phds)/sd(sub$n_phds)
paste("The signal-to-noise ratio for %s is %f", string, sig_noise_ratio)
#return(final_val)
}
else print("The entered string is not a valid broadfield")
}
signa_to_noise_ratio("Life sciences")
signa_to_noise_ratio("wrong string")
paste("The signal-to-noise ratio for %s is %f", string, sig_noise_ratio)
signa_to_noise_ratio("Life sciences")
library(tidyverse)
library(lubridate)
library(magrittr)
library(Lahman)
library(babynames)
library(kableExtra)
library(printr)
phd_field_major = phd_field %>% split(.$major_field) %>%
map(~ lm(n_phds ~ year + field, data = .)) %>%
map(summary) %>%
map_dbl("r.squared")
phd_field_major %>%
tibble(major_field = names(.), slope = .) %>%
left_join(.,phd_field) %>%
select(broad_field,slope) %>%
ggplot(aes(broad_field, slope)) + geom_boxplot(color = 'dodgerblue4', fill="deepskyblue3")
phd_field %>% split(.$major_field) %>%
map(~ lm(n_phds ~ year + field, data = .)) %>%
map(summary) %>%
map_dbl("r.squared") %>%
tibble(major_field = names(.), slope = .) %>%
left_join(.,phd_field) %>%
select(broad_field,slope) %>%
ggplot(aes(broad_field, slope)) + geom_boxplot(color = 'dodgerblue4', fill="deepskyblue3")
phd_field_major %>%
tibble(major_field = names(.), slope = .) %>%
left_join(.,phd_field) %>%
select(broad_field,slope) %>%
ggplot(aes(broad_field, slope)) + geom_boxplot(color = 'dodgerblue4', fill="deepskyblue3", angle=45)
phd_field_major %>%
tibble(major_field = names(.), slope = .) %>%
left_join(.,phd_field) %>%
select(broad_field,slope) %>%
ggplot(aes(broad_field, slope)) + geom_boxplot(color = 'dodgerblue4', fill="deepskyblue3", angle=45)
phd_field_major %>%
tibble(major_field = names(.), slope = .) %>%
left_join(.,phd_field) %>%
select(broad_field,slope) %>%
ggplot(aes(broad_field, slope)) + geom_boxplot(color = 'dodgerblue4', fill="deepskyblue3") +
theme(axis.text.x = element_text(angle = 45))
phd_field_major = phd_field %>% split(.$major_field) %>%
map(~ lm(n_phds ~ year + field, data = .)) %>%
map(summary) %>%
map_dbl("r.squared")
phd_field_major
phd_field_major %>%
tibble(major_field = names(.), slope = .) %>%
left_join(.,phd_field) %>%
select(broad_field,slope) %>%
ggplot(aes(broad_field, slope)) + geom_boxplot(color = 'dodgerblue4', fill="deepskyblue3") +
theme(axis.text.x = element_text(angle = 45))
na.omit(phd_field %>%
group_by(field,year) %>%
summarize(total_n_phds = sum(na.omit(n_phds))) %>%
arrange(field, year, total_n_phds) %>%
filter (total_n_phds > lag(total_n_phds, n)))
na.omit(phd_field %>%
group_by(broad_field, quartile = ntile(n_phds, 4)) %>%
summarize(total_n_phds = sum(na.omit(n_phds))))
phd_field %>%
group_by(field,year) %>%
summarize(total_n_phds = sum(na.omit(n_phds))) %>%
arrange(field, year, total_n_phds) %>%
filter (total_n_phds > lag(total_n_phds, n))
phd_field %>%
group_by(field,year) %>%
summarize(total_n_phds = sum(na.omit(n_phds))) %>%
arrange(field, year, total_n_phds) %>%
filter (total_n_phds > lag(total_n_phds, n))
phd_field %>%
group_by(field,year) %>%
summarize(total_n_phds = sum(na.omit(n_phds))) %>%
arrange(field, year, total_n_phds) %>%
filter (total_n_phds > lag(total_n_phds, n))
phd_field %>%
group_by(field,year) %>%
summarize(total_n_phds = sum(na.omit(n_phds))) %>%
arrange(field, year, total_n_phds) %>%
filter (total_n_phds > lag(total_n_phds))
phd_field %>%
group_by(field,year) %>%
summarize(total_n_phds = sum(na.omit(n_phds))) %>%
arrange(field, year, total_n_phds) %>%
filter (total_n_phds > lag(total_n_phds))
signa_to_noise_ratio <-function(string)
{
if (string %in% phd_field$broad_field)
{
sub = na.omit(phd_field[which(phd_field$broad_field==string),])
sig_noise_ratio = mean(sub$n_phds)/sd(sub$n_phds)
paste("The signal-to-noise ratio for %s is %f", string, sig_noise_ratio)
}
else print("The string is not a valid broad_field")
}
signa_to_noise_ratio("Life Sciences")
signa_to_noise_ratio("Data Science")
signa_to_noise_ratio <-function(string)
{
if (string %in% phd_field$broad_field)
{
sub = na.omit(phd_field[which(phd_field$broad_field==string),])
sig_noise_ratio = mean(sub$n_phds)/sd(sub$n_phds)
paste("The signal-to-noise ratio for %s is %f", string, sig_noise_ratio)
}
else print("The string is not a valid broad_field")
}
signa_to_noise_ratio("Life sciences")
signa_to_noise_ratio("Data Science")
signa_to_noise_ratio <-function(string)
{
if (string %in% phd_field$broad_field)
{
sub = na.omit(phd_field[which(phd_field$broad_field==string),])
sig_noise_ratio = mean(sub$n_phds)/sd(sub$n_phds)
paste("The signal-to-noise ratio for", string, " is " , sig_noise_ratio)
}
else print("The string is not a valid broad_field")
}
signa_to_noise_ratio("Life sciences")
signa_to_noise_ratio("Data Science")
signa_to_noise_ratio <-function(string)
{
if (string %in% phd_field$broad_field)
{
sub = na.omit(phd_field[which(phd_field$broad_field==string),])
sig_noise_ratio = mean(sub$n_phds)/sd(sub$n_phds)
paste("The signal-to-noise ratio for", string, "is" , sig_noise_ratio)
}
else print("The string is not a valid broad_field")
}
signa_to_noise_ratio("Life sciences")
signa_to_noise_ratio("Data Science")
phd_field
